{
  "stats": {
    "suites": 16,
    "tests": 160,
    "passes": 160,
    "pending": 0,
    "failures": 0,
    "start": "2020-05-04T12:38:34.633Z",
    "end": "2020-05-04T12:38:40.368Z",
    "duration": 5735,
    "testsRegistered": 160,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4bc8aec7-fbb0-41dd-957e-5451724399a7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "434c1abf-2b5c-4c8b-9a51-0094b2199392",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 1098,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "fdf4c9b4-4ae9-49f0-9e28-80e8740ea7bf",
              "parentUUID": "434c1abf-2b5c-4c8b-9a51-0094b2199392",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "0561d190-15b7-40d4-899e-83758579a115",
              "parentUUID": "434c1abf-2b5c-4c8b-9a51-0094b2199392",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "dccf720f-0f60-40f3-b7c5-d6c8af63d50f",
              "parentUUID": "434c1abf-2b5c-4c8b-9a51-0094b2199392",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "623178a8-0469-4c66-a72d-1b70f7aacde7",
              "parentUUID": "434c1abf-2b5c-4c8b-9a51-0094b2199392",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "a7d2f81c-4b02-4b1b-8b76-0315c37caaf9",
              "parentUUID": "434c1abf-2b5c-4c8b-9a51-0094b2199392",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "2b36110a-7c68-43e5-ae7f-592ee2798bf4",
              "parentUUID": "434c1abf-2b5c-4c8b-9a51-0094b2199392",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "33a30a4c-7ff6-4d43-a991-91a09e121f09",
              "parentUUID": "434c1abf-2b5c-4c8b-9a51-0094b2199392",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "00b87853-b005-4c6b-b064-15c3b8e264e9",
              "parentUUID": "434c1abf-2b5c-4c8b-9a51-0094b2199392",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "4d9ac27d-b2c4-4c72-b122-1f6a835af1f0",
              "parentUUID": "434c1abf-2b5c-4c8b-9a51-0094b2199392",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "da9f1131-f13f-4d77-be81-8e18e675a6ae",
              "parentUUID": "434c1abf-2b5c-4c8b-9a51-0094b2199392",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "29c957c8-e530-4671-90da-616dad636de4",
              "parentUUID": "434c1abf-2b5c-4c8b-9a51-0094b2199392",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "420ba93e-226b-437c-a256-5eb0c36d8518",
              "parentUUID": "434c1abf-2b5c-4c8b-9a51-0094b2199392",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dccf720f-0f60-40f3-b7c5-d6c8af63d50f",
            "623178a8-0469-4c66-a72d-1b70f7aacde7",
            "a7d2f81c-4b02-4b1b-8b76-0315c37caaf9",
            "2b36110a-7c68-43e5-ae7f-592ee2798bf4",
            "33a30a4c-7ff6-4d43-a991-91a09e121f09",
            "00b87853-b005-4c6b-b064-15c3b8e264e9",
            "4d9ac27d-b2c4-4c72-b122-1f6a835af1f0",
            "da9f1131-f13f-4d77-be81-8e18e675a6ae",
            "29c957c8-e530-4671-90da-616dad636de4",
            "420ba93e-226b-437c-a256-5eb0c36d8518"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "397303f8-76f7-4102-8475-34181ed5996b",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 252,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "7390832d-dac9-4e01-a642-4f8b1528ad16",
              "parentUUID": "397303f8-76f7-4102-8475-34181ed5996b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "ed816726-3e6f-420d-93f4-14d39333df73",
              "parentUUID": "397303f8-76f7-4102-8475-34181ed5996b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "9b2c5f7a-b330-40d3-b9a5-ba11b4b43fad",
              "parentUUID": "397303f8-76f7-4102-8475-34181ed5996b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "72e3171d-5841-4462-85be-637efb4fefc8",
              "parentUUID": "397303f8-76f7-4102-8475-34181ed5996b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "dc67444d-0af7-4d28-addb-2a622e06f346",
              "parentUUID": "397303f8-76f7-4102-8475-34181ed5996b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "5c7a7ec2-bcc3-4e74-9e93-81e3519cbd71",
              "parentUUID": "397303f8-76f7-4102-8475-34181ed5996b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "f2e88051-9262-44d9-a3bc-db1f595aa593",
              "parentUUID": "397303f8-76f7-4102-8475-34181ed5996b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "ab435a94-a81e-47c6-b45d-dd9c625daebf",
              "parentUUID": "397303f8-76f7-4102-8475-34181ed5996b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "8c36a3c0-24a0-4d36-860c-57ee2022dce2",
              "parentUUID": "397303f8-76f7-4102-8475-34181ed5996b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "322353dc-0c53-4bbb-af67-6dbee0192c84",
              "parentUUID": "397303f8-76f7-4102-8475-34181ed5996b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "36ecd863-e58f-4a67-bccf-b84448857dba",
              "parentUUID": "397303f8-76f7-4102-8475-34181ed5996b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "52eb22f2-b047-4ba1-aeff-664989d4bffd",
              "parentUUID": "397303f8-76f7-4102-8475-34181ed5996b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9b2c5f7a-b330-40d3-b9a5-ba11b4b43fad",
            "72e3171d-5841-4462-85be-637efb4fefc8",
            "dc67444d-0af7-4d28-addb-2a622e06f346",
            "5c7a7ec2-bcc3-4e74-9e93-81e3519cbd71",
            "f2e88051-9262-44d9-a3bc-db1f595aa593",
            "ab435a94-a81e-47c6-b45d-dd9c625daebf",
            "8c36a3c0-24a0-4d36-860c-57ee2022dce2",
            "322353dc-0c53-4bbb-af67-6dbee0192c84",
            "36ecd863-e58f-4a67-bccf-b84448857dba",
            "52eb22f2-b047-4ba1-aeff-664989d4bffd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "88b5d99f-d4c9-4ab0-bad3-d8613a31dd7c",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 245,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "be6d20a2-aa10-4b70-9873-ae5cf637e2cd",
              "parentUUID": "88b5d99f-d4c9-4ab0-bad3-d8613a31dd7c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "3571eb15-3ab1-4918-810d-7aa809cdbdc5",
              "parentUUID": "88b5d99f-d4c9-4ab0-bad3-d8613a31dd7c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "1fb36b55-ad1c-4604-8b0d-5111ce191dcf",
              "parentUUID": "88b5d99f-d4c9-4ab0-bad3-d8613a31dd7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "2974ade9-c413-4e25-b93d-c8dcbbbe7bbf",
              "parentUUID": "88b5d99f-d4c9-4ab0-bad3-d8613a31dd7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "f41764cd-b8f4-4e55-a1e5-b0995816c6ec",
              "parentUUID": "88b5d99f-d4c9-4ab0-bad3-d8613a31dd7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "8138ecdf-1493-4ed6-8cdf-e27e1b9ed46e",
              "parentUUID": "88b5d99f-d4c9-4ab0-bad3-d8613a31dd7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "c6500637-68a3-4522-8f13-7ea21b5c0341",
              "parentUUID": "88b5d99f-d4c9-4ab0-bad3-d8613a31dd7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "c0300511-c4b8-4d5e-8a95-a98a4938c0af",
              "parentUUID": "88b5d99f-d4c9-4ab0-bad3-d8613a31dd7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "409e05a1-5c5a-49ec-8f5e-98fe0edfeae6",
              "parentUUID": "88b5d99f-d4c9-4ab0-bad3-d8613a31dd7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "45fa129e-d213-4a58-b366-89febd11300a",
              "parentUUID": "88b5d99f-d4c9-4ab0-bad3-d8613a31dd7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "1ce881f8-0f43-40c8-a7ae-ae671ce0e95d",
              "parentUUID": "88b5d99f-d4c9-4ab0-bad3-d8613a31dd7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "d6f75e17-40d1-4758-b6a1-f0c63cb6c3d5",
              "parentUUID": "88b5d99f-d4c9-4ab0-bad3-d8613a31dd7c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1fb36b55-ad1c-4604-8b0d-5111ce191dcf",
            "2974ade9-c413-4e25-b93d-c8dcbbbe7bbf",
            "f41764cd-b8f4-4e55-a1e5-b0995816c6ec",
            "8138ecdf-1493-4ed6-8cdf-e27e1b9ed46e",
            "c6500637-68a3-4522-8f13-7ea21b5c0341",
            "c0300511-c4b8-4d5e-8a95-a98a4938c0af",
            "409e05a1-5c5a-49ec-8f5e-98fe0edfeae6",
            "45fa129e-d213-4a58-b366-89febd11300a",
            "1ce881f8-0f43-40c8-a7ae-ae671ce0e95d",
            "d6f75e17-40d1-4758-b6a1-f0c63cb6c3d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9736e6dc-6a85-4b79-b351-00945c9a7548",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 247,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "7738285a-6adc-40dc-ae66-a10f37dececc",
              "parentUUID": "9736e6dc-6a85-4b79-b351-00945c9a7548",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "22beda65-b899-468e-a6f7-409e2538afdb",
              "parentUUID": "9736e6dc-6a85-4b79-b351-00945c9a7548",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "6da40b61-2143-4d03-9d65-ceff42ef1fc8",
              "parentUUID": "9736e6dc-6a85-4b79-b351-00945c9a7548",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "cbd08b6f-87af-4f3f-9e4c-39216b17b176",
              "parentUUID": "9736e6dc-6a85-4b79-b351-00945c9a7548",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "b11040bb-063a-41c7-b540-920f2f1ef9a9",
              "parentUUID": "9736e6dc-6a85-4b79-b351-00945c9a7548",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "468ba102-66b3-4f55-ad27-d35a7da8fc3f",
              "parentUUID": "9736e6dc-6a85-4b79-b351-00945c9a7548",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "6632fd68-3674-405e-b9df-1d6225b10450",
              "parentUUID": "9736e6dc-6a85-4b79-b351-00945c9a7548",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "78cda073-0e1d-4b77-b2bc-95ddbac8fb30",
              "parentUUID": "9736e6dc-6a85-4b79-b351-00945c9a7548",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "f3fe71cf-de8d-4936-9e39-90ec1dfd839b",
              "parentUUID": "9736e6dc-6a85-4b79-b351-00945c9a7548",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "7bb8ffd8-ed41-4483-87c8-faebd946c1b4",
              "parentUUID": "9736e6dc-6a85-4b79-b351-00945c9a7548",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "9c7d88b8-ab00-42eb-8cb8-735c3f871c6e",
              "parentUUID": "9736e6dc-6a85-4b79-b351-00945c9a7548",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "098bea51-2b85-4ca4-811c-53a72c45e5cd",
              "parentUUID": "9736e6dc-6a85-4b79-b351-00945c9a7548",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6da40b61-2143-4d03-9d65-ceff42ef1fc8",
            "cbd08b6f-87af-4f3f-9e4c-39216b17b176",
            "b11040bb-063a-41c7-b540-920f2f1ef9a9",
            "468ba102-66b3-4f55-ad27-d35a7da8fc3f",
            "6632fd68-3674-405e-b9df-1d6225b10450",
            "78cda073-0e1d-4b77-b2bc-95ddbac8fb30",
            "f3fe71cf-de8d-4936-9e39-90ec1dfd839b",
            "7bb8ffd8-ed41-4483-87c8-faebd946c1b4",
            "9c7d88b8-ab00-42eb-8cb8-735c3f871c6e",
            "098bea51-2b85-4ca4-811c-53a72c45e5cd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "0ba7d480-6010-4b39-a310-e05aa91335d7",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 258,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "fa3dffda-7bdd-4f01-b99e-29d5fee06a75",
              "parentUUID": "0ba7d480-6010-4b39-a310-e05aa91335d7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "6f2fe9c7-41fc-413f-a1b7-71407a9b6e82",
              "parentUUID": "0ba7d480-6010-4b39-a310-e05aa91335d7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "81deae9b-3b03-4a53-b027-be4f58a603f0",
              "parentUUID": "0ba7d480-6010-4b39-a310-e05aa91335d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "52f36b4f-1c8c-4ddc-a39b-2f93337122a2",
              "parentUUID": "0ba7d480-6010-4b39-a310-e05aa91335d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "a7f9e4db-ae26-414b-be70-51d55c29aaf4",
              "parentUUID": "0ba7d480-6010-4b39-a310-e05aa91335d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "9501788b-c88b-493b-b06a-a3f6c1ef7f18",
              "parentUUID": "0ba7d480-6010-4b39-a310-e05aa91335d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "0498e8ff-453f-4e3a-8aaa-e83a170f7209",
              "parentUUID": "0ba7d480-6010-4b39-a310-e05aa91335d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "7260898b-fdc6-461d-9145-ab11e267a975",
              "parentUUID": "0ba7d480-6010-4b39-a310-e05aa91335d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "0cabe143-cbdb-4073-b111-7d53b047c0cf",
              "parentUUID": "0ba7d480-6010-4b39-a310-e05aa91335d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "5b2f32cc-cc33-453b-8fbc-77a8ff796e76",
              "parentUUID": "0ba7d480-6010-4b39-a310-e05aa91335d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "e14a74e5-88c0-473b-b09f-bac9cb59e9ad",
              "parentUUID": "0ba7d480-6010-4b39-a310-e05aa91335d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "71b8cd28-c9c6-4d0d-9c86-3e0e64b479b8",
              "parentUUID": "0ba7d480-6010-4b39-a310-e05aa91335d7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "81deae9b-3b03-4a53-b027-be4f58a603f0",
            "52f36b4f-1c8c-4ddc-a39b-2f93337122a2",
            "a7f9e4db-ae26-414b-be70-51d55c29aaf4",
            "9501788b-c88b-493b-b06a-a3f6c1ef7f18",
            "0498e8ff-453f-4e3a-8aaa-e83a170f7209",
            "7260898b-fdc6-461d-9145-ab11e267a975",
            "0cabe143-cbdb-4073-b111-7d53b047c0cf",
            "5b2f32cc-cc33-453b-8fbc-77a8ff796e76",
            "e14a74e5-88c0-473b-b09f-bac9cb59e9ad",
            "71b8cd28-c9c6-4d0d-9c86-3e0e64b479b8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "7e7fc152-2f56-472c-a272-7359d8ec4a02",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 244,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "64a68342-cca4-44f8-91f2-a489264e2221",
              "parentUUID": "7e7fc152-2f56-472c-a272-7359d8ec4a02",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "05b23d56-e44d-41ba-9eed-ac69ff242a2d",
              "parentUUID": "7e7fc152-2f56-472c-a272-7359d8ec4a02",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "09c03bed-ff19-4d44-8b48-aa0d59352008",
              "parentUUID": "7e7fc152-2f56-472c-a272-7359d8ec4a02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "da861caf-8c6d-49aa-a4dd-de52571195c1",
              "parentUUID": "7e7fc152-2f56-472c-a272-7359d8ec4a02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "f80f16a3-b2f7-4735-94fe-8a5dea403dde",
              "parentUUID": "7e7fc152-2f56-472c-a272-7359d8ec4a02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "c1e080b5-62bd-4fed-976b-17a2dbae4021",
              "parentUUID": "7e7fc152-2f56-472c-a272-7359d8ec4a02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "ce96cb34-a73c-401b-8c2e-2e6275eb1003",
              "parentUUID": "7e7fc152-2f56-472c-a272-7359d8ec4a02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "a168ca4c-f935-4481-8260-11b9fb7094d2",
              "parentUUID": "7e7fc152-2f56-472c-a272-7359d8ec4a02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "9d8896a2-7b16-48bf-bc9e-e663fe7804e0",
              "parentUUID": "7e7fc152-2f56-472c-a272-7359d8ec4a02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "6ee4501b-ef2f-49af-a65a-b1b0e0e9f06d",
              "parentUUID": "7e7fc152-2f56-472c-a272-7359d8ec4a02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "9315107f-79ca-4b2f-a727-f658b2fe5210",
              "parentUUID": "7e7fc152-2f56-472c-a272-7359d8ec4a02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "6f24a410-a0a6-436e-89cc-90aa58e00acc",
              "parentUUID": "7e7fc152-2f56-472c-a272-7359d8ec4a02",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "09c03bed-ff19-4d44-8b48-aa0d59352008",
            "da861caf-8c6d-49aa-a4dd-de52571195c1",
            "f80f16a3-b2f7-4735-94fe-8a5dea403dde",
            "c1e080b5-62bd-4fed-976b-17a2dbae4021",
            "ce96cb34-a73c-401b-8c2e-2e6275eb1003",
            "a168ca4c-f935-4481-8260-11b9fb7094d2",
            "9d8896a2-7b16-48bf-bc9e-e663fe7804e0",
            "6ee4501b-ef2f-49af-a65a-b1b0e0e9f06d",
            "9315107f-79ca-4b2f-a727-f658b2fe5210",
            "6f24a410-a0a6-436e-89cc-90aa58e00acc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "405caca1-a62b-49a0-96cb-5546058960ca",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 248,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "d9b38ce4-6d50-463e-a040-998d42ffa889",
              "parentUUID": "405caca1-a62b-49a0-96cb-5546058960ca",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "19d74ce2-3595-43d4-b458-99e383911fdf",
              "parentUUID": "405caca1-a62b-49a0-96cb-5546058960ca",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "7273fbc2-c009-42f2-a7b1-685a3b022deb",
              "parentUUID": "405caca1-a62b-49a0-96cb-5546058960ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "145610eb-f230-4baf-b97d-ca0098e135f5",
              "parentUUID": "405caca1-a62b-49a0-96cb-5546058960ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "a2bc28a1-0b5c-46ac-b97f-08ed63643b7a",
              "parentUUID": "405caca1-a62b-49a0-96cb-5546058960ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "e92dfd73-8dd2-486c-8204-9ba5aee375ab",
              "parentUUID": "405caca1-a62b-49a0-96cb-5546058960ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "2869bd8e-ad2d-4856-af9a-500110d3a9db",
              "parentUUID": "405caca1-a62b-49a0-96cb-5546058960ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "e587f547-c93c-4e2a-9edb-a29f8e8abf7e",
              "parentUUID": "405caca1-a62b-49a0-96cb-5546058960ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "a2679e74-ad1d-48a6-91b5-ee45c1cbfb3a",
              "parentUUID": "405caca1-a62b-49a0-96cb-5546058960ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "48b815de-9726-4df8-a590-5d1f957f21db",
              "parentUUID": "405caca1-a62b-49a0-96cb-5546058960ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "79fe9dc7-53eb-4173-a00a-1fd5ed82c2a2",
              "parentUUID": "405caca1-a62b-49a0-96cb-5546058960ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "adaf5c97-e643-4aa5-a88c-36c0e3443672",
              "parentUUID": "405caca1-a62b-49a0-96cb-5546058960ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7273fbc2-c009-42f2-a7b1-685a3b022deb",
            "145610eb-f230-4baf-b97d-ca0098e135f5",
            "a2bc28a1-0b5c-46ac-b97f-08ed63643b7a",
            "e92dfd73-8dd2-486c-8204-9ba5aee375ab",
            "2869bd8e-ad2d-4856-af9a-500110d3a9db",
            "e587f547-c93c-4e2a-9edb-a29f8e8abf7e",
            "a2679e74-ad1d-48a6-91b5-ee45c1cbfb3a",
            "48b815de-9726-4df8-a590-5d1f957f21db",
            "79fe9dc7-53eb-4173-a00a-1fd5ed82c2a2",
            "adaf5c97-e643-4aa5-a88c-36c0e3443672"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "683f3df2-787e-4739-af1a-ccbd4887b788",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 244,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "464af852-7688-4578-9536-05402d54d719",
              "parentUUID": "683f3df2-787e-4739-af1a-ccbd4887b788",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "a0dc352d-69be-4d6d-8903-0b0b075ffb93",
              "parentUUID": "683f3df2-787e-4739-af1a-ccbd4887b788",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "f86c3eb8-0b7f-4d1d-9178-4ebab4d358ce",
              "parentUUID": "683f3df2-787e-4739-af1a-ccbd4887b788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "b4d461ed-1057-4a0e-a3f0-e8b77377f3fc",
              "parentUUID": "683f3df2-787e-4739-af1a-ccbd4887b788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "8f5f46ec-791e-4827-a282-a12c48884900",
              "parentUUID": "683f3df2-787e-4739-af1a-ccbd4887b788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "00ecdb0d-11ef-491a-8a82-2e719a77ee45",
              "parentUUID": "683f3df2-787e-4739-af1a-ccbd4887b788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "d2ec2dfb-08a7-4ea1-9b58-e2533d736613",
              "parentUUID": "683f3df2-787e-4739-af1a-ccbd4887b788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "af028d7b-7c99-49e1-a4e4-98f5ed6aeaf3",
              "parentUUID": "683f3df2-787e-4739-af1a-ccbd4887b788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "de32dd70-7028-4c37-80a3-31821157afc9",
              "parentUUID": "683f3df2-787e-4739-af1a-ccbd4887b788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "28b8388c-4fac-42b6-b745-83875bdf3610",
              "parentUUID": "683f3df2-787e-4739-af1a-ccbd4887b788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "a40111f5-425f-42eb-9b92-55370882b060",
              "parentUUID": "683f3df2-787e-4739-af1a-ccbd4887b788",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "a3908c9f-a9b6-498a-9b06-692c55361ce0",
              "parentUUID": "683f3df2-787e-4739-af1a-ccbd4887b788",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f86c3eb8-0b7f-4d1d-9178-4ebab4d358ce",
            "b4d461ed-1057-4a0e-a3f0-e8b77377f3fc",
            "8f5f46ec-791e-4827-a282-a12c48884900",
            "00ecdb0d-11ef-491a-8a82-2e719a77ee45",
            "d2ec2dfb-08a7-4ea1-9b58-e2533d736613",
            "af028d7b-7c99-49e1-a4e4-98f5ed6aeaf3",
            "de32dd70-7028-4c37-80a3-31821157afc9",
            "28b8388c-4fac-42b6-b745-83875bdf3610",
            "a40111f5-425f-42eb-9b92-55370882b060",
            "a3908c9f-a9b6-498a-9b06-692c55361ce0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6d5cde26-0825-4c6c-b1c7-7a94a0702cab",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 244,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "fbdf59e5-e4ec-47d9-956a-a81188502388",
              "parentUUID": "6d5cde26-0825-4c6c-b1c7-7a94a0702cab",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "a3e7c09c-1ef5-4375-b99c-b470933f1a59",
              "parentUUID": "6d5cde26-0825-4c6c-b1c7-7a94a0702cab",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "c723d824-e1f9-4fcb-8fc9-fc576fbadf38",
              "parentUUID": "6d5cde26-0825-4c6c-b1c7-7a94a0702cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "2b0d2253-32ac-408c-85f2-497c7559cb77",
              "parentUUID": "6d5cde26-0825-4c6c-b1c7-7a94a0702cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "4a35e24a-14b9-4416-9580-d72256f5456d",
              "parentUUID": "6d5cde26-0825-4c6c-b1c7-7a94a0702cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "43757453-1a76-4ace-8393-32ac25804fdf",
              "parentUUID": "6d5cde26-0825-4c6c-b1c7-7a94a0702cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "9eff5659-a452-4936-a926-8aa957c00bf5",
              "parentUUID": "6d5cde26-0825-4c6c-b1c7-7a94a0702cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "2d262e54-52db-46f9-8c84-c394d2ff280e",
              "parentUUID": "6d5cde26-0825-4c6c-b1c7-7a94a0702cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "44966124-c48b-4814-97f7-9ecd9dba324a",
              "parentUUID": "6d5cde26-0825-4c6c-b1c7-7a94a0702cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "b9727335-f143-473b-9562-5bb1680a37be",
              "parentUUID": "6d5cde26-0825-4c6c-b1c7-7a94a0702cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "dd8219f9-9160-44c2-8576-421ebcd169b8",
              "parentUUID": "6d5cde26-0825-4c6c-b1c7-7a94a0702cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "7e7c80ca-6cf2-40a8-9e76-c7370615538b",
              "parentUUID": "6d5cde26-0825-4c6c-b1c7-7a94a0702cab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c723d824-e1f9-4fcb-8fc9-fc576fbadf38",
            "2b0d2253-32ac-408c-85f2-497c7559cb77",
            "4a35e24a-14b9-4416-9580-d72256f5456d",
            "43757453-1a76-4ace-8393-32ac25804fdf",
            "9eff5659-a452-4936-a926-8aa957c00bf5",
            "2d262e54-52db-46f9-8c84-c394d2ff280e",
            "44966124-c48b-4814-97f7-9ecd9dba324a",
            "b9727335-f143-473b-9562-5bb1680a37be",
            "dd8219f9-9160-44c2-8576-421ebcd169b8",
            "7e7c80ca-6cf2-40a8-9e76-c7370615538b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6bab6b27-bdf8-48a0-8763-f8931ad06c6a",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 247,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "1a635a92-1bf3-4b93-9ca5-f2d11894c54f",
              "parentUUID": "6bab6b27-bdf8-48a0-8763-f8931ad06c6a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "b79f780a-37d8-48eb-8f05-122a4b524e6a",
              "parentUUID": "6bab6b27-bdf8-48a0-8763-f8931ad06c6a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "fd717c30-deb8-4eba-93ca-9b8f96ea4489",
              "parentUUID": "6bab6b27-bdf8-48a0-8763-f8931ad06c6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "b7def9f5-8bf9-401c-8563-75a97a796291",
              "parentUUID": "6bab6b27-bdf8-48a0-8763-f8931ad06c6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "853f379f-c713-40b8-88ba-32754f1b0ca3",
              "parentUUID": "6bab6b27-bdf8-48a0-8763-f8931ad06c6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "42d64090-a41b-496f-8c10-4c6f5c2ae49b",
              "parentUUID": "6bab6b27-bdf8-48a0-8763-f8931ad06c6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "eb476a9e-a3d9-47ee-895e-c8ac3478e48f",
              "parentUUID": "6bab6b27-bdf8-48a0-8763-f8931ad06c6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "7ba0f72d-80d8-4d3f-94ae-7ca881e21f37",
              "parentUUID": "6bab6b27-bdf8-48a0-8763-f8931ad06c6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "e7d96d62-0cb9-4d39-a2e2-1a1d3660d736",
              "parentUUID": "6bab6b27-bdf8-48a0-8763-f8931ad06c6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "ff910eba-81d9-442c-a1e3-a2b7516274a1",
              "parentUUID": "6bab6b27-bdf8-48a0-8763-f8931ad06c6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "864d4c21-965d-4d6c-bfa3-9f6435ea8362",
              "parentUUID": "6bab6b27-bdf8-48a0-8763-f8931ad06c6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "06296c1d-7df0-4140-82fc-7288ebc1fa5b",
              "parentUUID": "6bab6b27-bdf8-48a0-8763-f8931ad06c6a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd717c30-deb8-4eba-93ca-9b8f96ea4489",
            "b7def9f5-8bf9-401c-8563-75a97a796291",
            "853f379f-c713-40b8-88ba-32754f1b0ca3",
            "42d64090-a41b-496f-8c10-4c6f5c2ae49b",
            "eb476a9e-a3d9-47ee-895e-c8ac3478e48f",
            "7ba0f72d-80d8-4d3f-94ae-7ca881e21f37",
            "e7d96d62-0cb9-4d39-a2e2-1a1d3660d736",
            "ff910eba-81d9-442c-a1e3-a2b7516274a1",
            "864d4c21-965d-4d6c-bfa3-9f6435ea8362",
            "06296c1d-7df0-4140-82fc-7288ebc1fa5b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "1a9f7711-d3b1-4da0-acaa-69d8265e8e74",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 249,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "8d9260de-9b22-4a6b-ab76-59135b8d9b82",
              "parentUUID": "1a9f7711-d3b1-4da0-acaa-69d8265e8e74",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "fc1e77c0-10bf-43a7-9cd9-481ea103f37b",
              "parentUUID": "1a9f7711-d3b1-4da0-acaa-69d8265e8e74",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "b068e53b-1d66-40b9-ae35-860acc81c065",
              "parentUUID": "1a9f7711-d3b1-4da0-acaa-69d8265e8e74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "94b5996a-ed4e-4e7f-91a1-e05047c8c29d",
              "parentUUID": "1a9f7711-d3b1-4da0-acaa-69d8265e8e74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "ab7f491d-a7ad-4073-82e6-c73620e26513",
              "parentUUID": "1a9f7711-d3b1-4da0-acaa-69d8265e8e74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "cd8b7c71-8ee0-45ea-a21b-589033b978e5",
              "parentUUID": "1a9f7711-d3b1-4da0-acaa-69d8265e8e74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "0cf0d030-2e55-44f2-9c93-ee8732c64b82",
              "parentUUID": "1a9f7711-d3b1-4da0-acaa-69d8265e8e74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "a9c0f5da-c686-4995-9c72-b16cb0d64da9",
              "parentUUID": "1a9f7711-d3b1-4da0-acaa-69d8265e8e74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "e23cddd9-0b9a-4093-a015-23d10c2e9ae2",
              "parentUUID": "1a9f7711-d3b1-4da0-acaa-69d8265e8e74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "e0b52b17-e18b-4169-98a3-a84a51ed35f3",
              "parentUUID": "1a9f7711-d3b1-4da0-acaa-69d8265e8e74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "abaf900e-c923-44c7-92c1-0b33050b78b2",
              "parentUUID": "1a9f7711-d3b1-4da0-acaa-69d8265e8e74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "069c69ee-a643-4e20-96a1-879989cfda0e",
              "parentUUID": "1a9f7711-d3b1-4da0-acaa-69d8265e8e74",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b068e53b-1d66-40b9-ae35-860acc81c065",
            "94b5996a-ed4e-4e7f-91a1-e05047c8c29d",
            "ab7f491d-a7ad-4073-82e6-c73620e26513",
            "cd8b7c71-8ee0-45ea-a21b-589033b978e5",
            "0cf0d030-2e55-44f2-9c93-ee8732c64b82",
            "a9c0f5da-c686-4995-9c72-b16cb0d64da9",
            "e23cddd9-0b9a-4093-a015-23d10c2e9ae2",
            "e0b52b17-e18b-4169-98a3-a84a51ed35f3",
            "abaf900e-c923-44c7-92c1-0b33050b78b2",
            "069c69ee-a643-4e20-96a1-879989cfda0e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b9120ad6-73c4-4cd7-b5c7-504fdf763614",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 248,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "bdc40704-fecb-4729-a9a7-58037a89f268",
              "parentUUID": "b9120ad6-73c4-4cd7-b5c7-504fdf763614",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "3cc31d04-a4a6-453a-847b-dcadd81efcad",
              "parentUUID": "b9120ad6-73c4-4cd7-b5c7-504fdf763614",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "05b126cd-4ad5-49a2-bbc0-eccbd272a04e",
              "parentUUID": "b9120ad6-73c4-4cd7-b5c7-504fdf763614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "9edb0908-7d0c-4968-910c-9182eec9aeea",
              "parentUUID": "b9120ad6-73c4-4cd7-b5c7-504fdf763614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "64f93773-66e3-4595-a01e-abaeaece7885",
              "parentUUID": "b9120ad6-73c4-4cd7-b5c7-504fdf763614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "e5a7f394-68b0-489f-bc7c-e8194c4977dc",
              "parentUUID": "b9120ad6-73c4-4cd7-b5c7-504fdf763614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "ab67ba91-79a2-4cb3-9459-fd5c774ea1e0",
              "parentUUID": "b9120ad6-73c4-4cd7-b5c7-504fdf763614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "7bf323a4-179f-4bea-b478-b8a5b0f6ca06",
              "parentUUID": "b9120ad6-73c4-4cd7-b5c7-504fdf763614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "b1177864-a7bf-4f83-b3fc-c4d5fb68959d",
              "parentUUID": "b9120ad6-73c4-4cd7-b5c7-504fdf763614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "846eba89-729a-4d6c-802f-d8ce06a8fa2b",
              "parentUUID": "b9120ad6-73c4-4cd7-b5c7-504fdf763614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "e2ba1bf6-06b7-4cc6-9504-26b4daa46bcb",
              "parentUUID": "b9120ad6-73c4-4cd7-b5c7-504fdf763614",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "3fc016ba-92d7-4bc9-bc90-ace1d1e75127",
              "parentUUID": "b9120ad6-73c4-4cd7-b5c7-504fdf763614",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05b126cd-4ad5-49a2-bbc0-eccbd272a04e",
            "9edb0908-7d0c-4968-910c-9182eec9aeea",
            "64f93773-66e3-4595-a01e-abaeaece7885",
            "e5a7f394-68b0-489f-bc7c-e8194c4977dc",
            "ab67ba91-79a2-4cb3-9459-fd5c774ea1e0",
            "7bf323a4-179f-4bea-b478-b8a5b0f6ca06",
            "b1177864-a7bf-4f83-b3fc-c4d5fb68959d",
            "846eba89-729a-4d6c-802f-d8ce06a8fa2b",
            "e2ba1bf6-06b7-4cc6-9504-26b4daa46bcb",
            "3fc016ba-92d7-4bc9-bc90-ace1d1e75127"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "bc9da1ec-0da4-4d08-83b2-846b0b2fcde8",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 243,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "f61b3bc4-634b-4c38-8286-b9732f0d6b54",
              "parentUUID": "bc9da1ec-0da4-4d08-83b2-846b0b2fcde8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "d32d64ad-9cd4-4ee2-86b7-71e4b47fa44f",
              "parentUUID": "bc9da1ec-0da4-4d08-83b2-846b0b2fcde8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "bed17945-1e07-43cb-a6ae-28c52412e0bf",
              "parentUUID": "bc9da1ec-0da4-4d08-83b2-846b0b2fcde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "3693975d-12cc-48cc-bb57-62d3be5c9b79",
              "parentUUID": "bc9da1ec-0da4-4d08-83b2-846b0b2fcde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "7fcfef63-9e8c-4da7-89e3-100eab1b30ae",
              "parentUUID": "bc9da1ec-0da4-4d08-83b2-846b0b2fcde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "4bf4b7cf-d9a6-4173-ba5e-9deba3901ce8",
              "parentUUID": "bc9da1ec-0da4-4d08-83b2-846b0b2fcde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "e7ce8b03-2433-4903-9f35-751a596eab0b",
              "parentUUID": "bc9da1ec-0da4-4d08-83b2-846b0b2fcde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "f7679813-e0ee-4a5a-b7d1-0e462ede2eca",
              "parentUUID": "bc9da1ec-0da4-4d08-83b2-846b0b2fcde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "4ff186da-6cb9-4a91-bd65-cf6cc8b45395",
              "parentUUID": "bc9da1ec-0da4-4d08-83b2-846b0b2fcde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "b5f7ebb1-7a9e-46de-a581-dc8f378fb46a",
              "parentUUID": "bc9da1ec-0da4-4d08-83b2-846b0b2fcde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "1be79195-60aa-42a8-b932-6b327ed62d8d",
              "parentUUID": "bc9da1ec-0da4-4d08-83b2-846b0b2fcde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "8974424b-8ad5-4615-a773-dfb6fbd5907f",
              "parentUUID": "bc9da1ec-0da4-4d08-83b2-846b0b2fcde8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bed17945-1e07-43cb-a6ae-28c52412e0bf",
            "3693975d-12cc-48cc-bb57-62d3be5c9b79",
            "7fcfef63-9e8c-4da7-89e3-100eab1b30ae",
            "4bf4b7cf-d9a6-4173-ba5e-9deba3901ce8",
            "e7ce8b03-2433-4903-9f35-751a596eab0b",
            "f7679813-e0ee-4a5a-b7d1-0e462ede2eca",
            "4ff186da-6cb9-4a91-bd65-cf6cc8b45395",
            "b5f7ebb1-7a9e-46de-a581-dc8f378fb46a",
            "1be79195-60aa-42a8-b932-6b327ed62d8d",
            "8974424b-8ad5-4615-a773-dfb6fbd5907f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "829a9cb4-e2fa-4b43-a383-a427237b3ad6",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 248,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "3c335181-75b4-40f1-9a6c-9ef7f1403edc",
              "parentUUID": "829a9cb4-e2fa-4b43-a383-a427237b3ad6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "deacae65-5d73-48bd-b813-add369fd49aa",
              "parentUUID": "829a9cb4-e2fa-4b43-a383-a427237b3ad6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "6123d8b4-4b8b-4144-9668-9bcc9ceb9a2d",
              "parentUUID": "829a9cb4-e2fa-4b43-a383-a427237b3ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "351ca2cf-d3cb-475e-bd7f-fd3d0effbf5d",
              "parentUUID": "829a9cb4-e2fa-4b43-a383-a427237b3ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "df5c0d63-5a74-411a-b8a7-c4e89caf5f2d",
              "parentUUID": "829a9cb4-e2fa-4b43-a383-a427237b3ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "27c82a09-60e5-43ec-9300-47b61bd27d76",
              "parentUUID": "829a9cb4-e2fa-4b43-a383-a427237b3ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "202dfd66-c1ab-42c1-a98d-cd7310098b0a",
              "parentUUID": "829a9cb4-e2fa-4b43-a383-a427237b3ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "6b6b7877-2c84-46c0-9ba9-00fef3aef074",
              "parentUUID": "829a9cb4-e2fa-4b43-a383-a427237b3ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "a1e3ebb6-819a-48d7-a854-a703986fa0de",
              "parentUUID": "829a9cb4-e2fa-4b43-a383-a427237b3ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "cf786eec-6d5d-4e55-8e4f-73883fb220fb",
              "parentUUID": "829a9cb4-e2fa-4b43-a383-a427237b3ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "eb95570a-a639-4b93-8472-1dd29e4853af",
              "parentUUID": "829a9cb4-e2fa-4b43-a383-a427237b3ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "7c2f1240-61f5-4b34-a2a9-8acdb13765af",
              "parentUUID": "829a9cb4-e2fa-4b43-a383-a427237b3ad6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6123d8b4-4b8b-4144-9668-9bcc9ceb9a2d",
            "351ca2cf-d3cb-475e-bd7f-fd3d0effbf5d",
            "df5c0d63-5a74-411a-b8a7-c4e89caf5f2d",
            "27c82a09-60e5-43ec-9300-47b61bd27d76",
            "202dfd66-c1ab-42c1-a98d-cd7310098b0a",
            "6b6b7877-2c84-46c0-9ba9-00fef3aef074",
            "a1e3ebb6-819a-48d7-a854-a703986fa0de",
            "cf786eec-6d5d-4e55-8e4f-73883fb220fb",
            "eb95570a-a639-4b93-8472-1dd29e4853af",
            "7c2f1240-61f5-4b34-a2a9-8acdb13765af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b72403fb-da2d-4836-8b50-ea12def16615",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 249,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "bf8fe7f2-65d7-40f2-b147-bed4b111ee68",
              "parentUUID": "b72403fb-da2d-4836-8b50-ea12def16615",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "6eaff927-cd4d-428a-a593-c5f9b617fba8",
              "parentUUID": "b72403fb-da2d-4836-8b50-ea12def16615",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "65021afa-b3f9-4434-a16e-f0e0dd44d959",
              "parentUUID": "b72403fb-da2d-4836-8b50-ea12def16615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "8b805bf1-8440-4351-99cd-411243001132",
              "parentUUID": "b72403fb-da2d-4836-8b50-ea12def16615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "edf14d49-5378-4c72-9296-032b3f7407c8",
              "parentUUID": "b72403fb-da2d-4836-8b50-ea12def16615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "35469301-8975-493e-a0c0-79c3e72518a6",
              "parentUUID": "b72403fb-da2d-4836-8b50-ea12def16615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "786c3f14-16a0-4155-937f-81deb5da8628",
              "parentUUID": "b72403fb-da2d-4836-8b50-ea12def16615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "e68a8eeb-55e0-4df1-b50e-28984f120835",
              "parentUUID": "b72403fb-da2d-4836-8b50-ea12def16615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "2babaa1f-3cfc-4d67-b221-c91f9cb8ab0a",
              "parentUUID": "b72403fb-da2d-4836-8b50-ea12def16615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "95b9fd3a-1db4-4ad6-9e1f-d6bcd90cb3ba",
              "parentUUID": "b72403fb-da2d-4836-8b50-ea12def16615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "f339c9c6-b7f4-4811-b51a-dda173010204",
              "parentUUID": "b72403fb-da2d-4836-8b50-ea12def16615",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "8bd86e4e-5326-4666-b318-3ab5eaebaea2",
              "parentUUID": "b72403fb-da2d-4836-8b50-ea12def16615",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "65021afa-b3f9-4434-a16e-f0e0dd44d959",
            "8b805bf1-8440-4351-99cd-411243001132",
            "edf14d49-5378-4c72-9296-032b3f7407c8",
            "35469301-8975-493e-a0c0-79c3e72518a6",
            "786c3f14-16a0-4155-937f-81deb5da8628",
            "e68a8eeb-55e0-4df1-b50e-28984f120835",
            "2babaa1f-3cfc-4d67-b221-c91f9cb8ab0a",
            "95b9fd3a-1db4-4ad6-9e1f-d6bcd90cb3ba",
            "f339c9c6-b7f4-4811-b51a-dda173010204",
            "8bd86e4e-5326-4666-b318-3ab5eaebaea2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9d81d4f6-5eb3-47de-8737-0e9100d5d37b",
          "title": "Test FSEW",
          "fullFile": "/Users/marinaratova/Desktop/JS/mocha-chai-test-project/test/testFSEW.js",
          "file": "/test/testFSEW.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Spin",
              "fullTitle": "Test FSEW \"before all\" hook: Spin",
              "timedOut": false,
              "duration": 1046,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (i >= 15 && nameAction == \"spin\") {\n    try {\n        const res = await spinbeforFSEW();\n        const obj = res.context.freespins.count;\n        console.log(obj.rest);\n        let action = false;\n        nameAction = \"freespin\";\n        data = {...data, ...obj, res, action };\n    } catch (error) {\n        let { code, message } = data.res.status;\n        console.log(code + \"  code\");\n        console.log(message + \"  message\");\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n} else {\n    try {\n        const res = await freespinEW();\n        expect(res.status.status).to.be.equal(200);\n        const obj = res.context.freespins.count;\n        const fsWin = res.context.freespins.win;\n        const matrix = res.context.matrix;\n        let funcResultExpW = chekExpendingWild(matrix);\n        const balance = res.user.balance;\n        const action = true;\n        nameAction = chekActionSpin(res);\n        const funcResult = checkWin1(res);\n        data = {...data, ...obj, res, matrix, balance, fsWin, action, funcResult, ...funcResultExpW };\n        if (funcResult !== null) {\n            let winLinesWithoutNull = funcResult.allWinLines.filter(winLines => winLines.id !== null);\n            console.log(funcResult.allWinLines);\n            console.log(winLinesWithoutNull);\n            if (funcResult.allWinLines[0].id == null && funcResult.allWinLines[0].amount != 0) {\n                let isWinNull = true;\n                let winLinesNull = funcResult.allWinLines[0];\n                data = {...data, isWinNull, winLinesNull };\n            }\n            data = {...data, winLinesWithoutNull, ...funcResult };\n        }\n        const file = await fs.readFile('db.json', 'utf8');\n        const fileData = JSON.parse(file);\n        globalDate = {...fileData };\n    } catch (error) {\n        console.log('!!!!!!ERROR in before block!!!!!! ' + error);\n    }\n}",
              "err": {},
              "uuid": "2ffcda52-63b0-422f-87e9-d07e9470aee8",
              "parentUUID": "9d81d4f6-5eb3-47de-8737-0e9100d5d37b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: wright",
              "fullTitle": "Test FSEW \"after all\" hook: wright",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { rest, res } = data;\nif (rest > 0) {\n    let oldRest = res.context.freespins.count.rest;\n    let oldTotal = res.context.freespins.count.total;\n    let oldFsWin = res.context.freespins.win;\n    let oldBalance = res.user.balance;\n    globalDate = {...globalDate, oldRest, oldTotal, oldFsWin, oldBalance };\n    await fs.writeFile('db.json', JSON.stringify(globalDate));\n    // } else {\n    //     let oldRest = \"15\";\n    //     let oldTotal = \"15\";\n    //     let oldFsWin = res.context.freespins.win;\n    //     let oldBalance = res.user.balance;\n    //     globalDate = { oldRest, oldTotal, oldFsWin, oldBalance };\n    //     await fs.writeFile('db.json', JSON.stringify(globalDate));\n}",
              "err": {},
              "uuid": "dc6bc8cd-3cdb-4f99-a55f-37a36cbf4d22",
              "parentUUID": "9d81d4f6-5eb3-47de-8737-0e9100d5d37b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "check correct add count of FS",
              "fullTitle": "Test FSEW check correct add count of FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    let { matrix, add, total, oldTotal } = data;\n    const arrScatter = [];\n    matrix.forEach((el) => {\n        let getScatter = el.filter(value => value == 1);\n        if (getScatter.length > 0) {\n            arrScatter.push(...getScatter);\n        }\n    });\n    if (arrScatter.length > 2) {\n        oldTotal = total + 15;\n        add = 15;\n        data = {...data, add, oldTotal };\n        i = i + 15;\n        console.log(add + \" add \");\n        expect(add).to.be.equal(15);\n    } else {\n        console.log(add + \" add\");\n        expect(add).to.equal(+0);\n    }\n}",
              "err": {},
              "uuid": "b5055927-5d48-4208-85d3-e44ccb2b6fc4",
              "parentUUID": "9d81d4f6-5eb3-47de-8737-0e9100d5d37b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct total FS",
              "fullTitle": "Test FSEW check correct total FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, add, total, action } = data;\nif (action == true) {\n    const { oldTotal } = globalDate;\n    if (add == 15) {\n        console.log(oldTotal + add + \" oldTotal FS + rest Fs  \" + total + \" total FS\");\n        expect(oldTotal + add).to.equal(total);\n    } else {\n        console.log(oldTotal + \" oldTotal FS  \" + total + \" total FS\");\n        expect(+oldTotal).to.equal(+total);\n    }\n}",
              "err": {},
              "uuid": "f4c3f83a-450c-4a23-9cdf-1f709d22675b",
              "parentUUID": "9d81d4f6-5eb3-47de-8737-0e9100d5d37b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check rest FS",
              "fullTitle": "Test FSEW check rest FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { add, rest, action } = data;\nconst oldRest = globalDate.oldRest;\nif (action == true) {\n    let rightRest = null;\n    if (add > 0) {\n        rightRest = oldRest - 1 + 15;\n    } else {\n        rightRest = oldRest - 1;\n    }\n    expect(rest).to.be.equal(rightRest);\n}",
              "err": {},
              "uuid": "2d4d7639-f9b3-4c1e-aa1d-4ffec36db6f8",
              "parentUUID": "9d81d4f6-5eb3-47de-8737-0e9100d5d37b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "balance is not change",
              "fullTitle": "Test FSEW balance is not change",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { rest, balance, action } = data;\nlet { oldBalance } = globalDate;\nif (action) {\n    if (rest > 0) {\n        console.log(balance + \" balance\" + oldBalance + \" oldBalance\");\n        expect(balance).to.be.equal(oldBalance);\n    }\n}",
              "err": {},
              "uuid": "2d5a676c-b2fd-4b8d-b9aa-e43c7dd2771e",
              "parentUUID": "9d81d4f6-5eb3-47de-8737-0e9100d5d37b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position in FS",
              "fullTitle": "Test FSEW check correct wining symbol position in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null) {\n        winLinesWithoutNull.forEach((el) => {\n            console.log(el.id + \"  id\");\n            const winPositions = el.positions;\n            console.log(winPositions);\n            console.log(el.amount + \"   amount\");\n            const winSymbol = el.symbol;\n            winPositions.forEach((el) => {\n                const tempSymbols = newMatrix[el[0]][el[1]];\n                if (tempSymbols !== \"2\") {\n                    expect(winSymbol).to.be.equal(tempSymbols);\n                } else {\n                    expect(\"2\").to.be.equal(tempSymbols);\n                    console.log('there is a wild in the pay line');\n                }\n            });\n            console.log([winSymbol] + \" is correct position\");\n        });\n    }\n}",
              "err": {},
              "uuid": "16e14c8e-85f5-485b-bb1a-2a0ce275eafe",
              "parentUUID": "9d81d4f6-5eb3-47de-8737-0e9100d5d37b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct wining symbol position null in FS",
              "fullTitle": "Test FSEW check correct wining symbol position null in FS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { newMatrix, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        console.log(winLinesNull);\n        const positionSymbols = winLinesNull.positions;\n        const symbol = 1;\n        positionSymbols.forEach((el) => {\n            const coordinate = el; // [0, 0] coordinate[0] coordinate[1]\n            const tempSymbols = newMatrix[coordinate[0]][coordinate[1]];\n            expect(symbol).to.be.equal(Number(tempSymbols));\n        });\n        console.log(\"position of wining Scatter is corect\");\n    }\n}",
              "err": {},
              "uuid": "c75cb46d-bc9e-43df-a38b-6fd3a477ff76",
              "parentUUID": "9d81d4f6-5eb3-47de-8737-0e9100d5d37b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual of winnings in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual of winnings in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, newMatrix, winLinesWithoutNull, funcResult, action } = data;\nif (action == true && funcResult !== null) {\n    let bet = betLines(res);\n    winLinesWithoutNull.forEach((el) => {\n        const winPositions = el.positions;\n        const winSymbol = el.symbol;\n        const amount = el.amount;\n        function winRight() {\n            return PaytableCoef(winPositions, paytable, winSymbol) * bet;\n        }\n        let rightAmount = winRight();\n        expect(amount).to.be.equal(rightAmount);\n    });\n}",
              "err": {},
              "uuid": "4e5dc2ab-4a96-45bd-814e-ef9a271fe04a",
              "parentUUID": "9d81d4f6-5eb3-47de-8737-0e9100d5d37b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual Scatter in FS(without * 3)",
              "fullTitle": "Test FSEW check correct accrual Scatter in FS(without * 3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { res, winLinesNull, isWinNull, funcResult, action } = data;\nif (action == true) {\n    if (funcResult !== null && isWinNull == true) {\n        const bet = res.context.bet;\n        const symbol = 1;\n        const amount = winLinesNull.amount;\n        const winPositions = winLinesNull.positions;\n        console.log(winLinesNull);\n        const winRightNull = PaytableCoef(winPositions, paytable, symbol) * bet;\n        expect(amount).to.be.equal(winRightNull);\n        console.log(\"scatter is accrualed correct\" + amount + \" amount\" + winRightNull + \"winRightNull\");\n    }\n}",
              "err": {},
              "uuid": "aa13b322-d57a-4a60-b2f7-74a151f5942a",
              "parentUUID": "9d81d4f6-5eb3-47de-8737-0e9100d5d37b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct accrual fsWin",
              "fullTitle": "Test FSEW check correct accrual fsWin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { fsWin, funcResult, allWinLines, action } = data;\nlet { oldFsWin } = globalDate;\nif (action == true) {\n    if (funcResult !== null) {\n        let sum = 0;\n        allWinLines.forEach((el) => {\n            let amount = el.amount;\n            return sum += amount;\n        });\n        console.log(fsWin + \" fsWin \" + oldFsWin + \" + \" + sum + \" oldFsWin + sum\");\n        expect(fsWin).to.be.equal(oldFsWin + sum);\n    }\n}",
              "err": {},
              "uuid": "ddcfbcad-5bfd-4ea6-87e6-de9c255dd4aa",
              "parentUUID": "9d81d4f6-5eb3-47de-8737-0e9100d5d37b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check correct add fsWin to balance",
              "fullTitle": "Test FSEW check correct add fsWin to balance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { action } = data;\nif (action == true) {\n    const { add, rest, fsWin, balance } = data;\n    let { oldBalance } = globalDate;\n    if (rest == 0 && add == 0) {\n        const rightBalance = oldBalance + fsWin;\n        console.log(\"!!! balance \" + balance);\n        console.log(\"!!! rightBalance \" + rightBalance);\n        console.log(\"!!! fsWin \" + fsWin);\n        expect(balance).to.equal(rightBalance);\n    }\n}",
              "err": {},
              "uuid": "c630647f-8f27-42f0-b2e7-b13e9c6b1b65",
              "parentUUID": "9d81d4f6-5eb3-47de-8737-0e9100d5d37b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5055927-5d48-4208-85d3-e44ccb2b6fc4",
            "f4c3f83a-450c-4a23-9cdf-1f709d22675b",
            "2d4d7639-f9b3-4c1e-aa1d-4ffec36db6f8",
            "2d5a676c-b2fd-4b8d-b9aa-e43c7dd2771e",
            "16e14c8e-85f5-485b-bb1a-2a0ce275eafe",
            "c75cb46d-bc9e-43df-a38b-6fd3a477ff76",
            "4e5dc2ab-4a96-45bd-814e-ef9a271fe04a",
            "aa13b322-d57a-4a60-b2f7-74a151f5942a",
            "ddcfbcad-5bfd-4ea6-87e6-de9c255dd4aa",
            "c630647f-8f27-42f0-b2e7-b13e9c6b1b65"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.0"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}